{"version":3,"sources":["api/api.ts","Person/PersonRow.tsx","PeopleTable/PeopleTable.tsx","PeoplePage.tsx","App.tsx","index.tsx"],"names":["TABLE_TITLES","PersonRow","people","history","useHistory","location","useLocation","personSlug","useParams","handleChange","personUrl","push","pathname","search","map","person","className","cn","person__active","slug","key","name","id","role","onClick","person__male","sex","person__female","born","died","person__whithoutParent","motherSlug","motherName","fatherSlug","fatherName","PeopleTable","useState","setPeople","searchParams","URLSearchParams","query","useMemo","get","sortBy","sortOrder","useEffect","fetch","then","responce","json","data","index","mother","find","mom","father","dad","preparedPeople","filter","toLowerCase","includes","filterPeople","sort","a","b","localeCompare","reverse","type","value","onChange","event","set","target","toString","title","handleTitleClick","PeoplePage","HomePage","App","to","exact","activeClassName","path","component","from","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af01c973.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = (): Promise<Person[]> => {\n  return fetch(API_URL)\n    .then(responce => responce.json());\n};\n\nexport const TABLE_TITLES = [\n  'Id',\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n","import React from 'react';\nimport { useHistory, useParams, useLocation } from 'react-router-dom';\nimport cn from 'classnames';\nimport './Person.scss';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PersonRow: React.FC<Props> = ({ people }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { personSlug } = useParams();\n\n  const handleChange = (personUrl?: string) => {\n    history.push({\n      pathname: `/people/${personUrl}`,\n      search: location.search,\n    });\n  };\n\n  return (\n    <>\n      {people.map((person: Person) => (\n        <tr\n\n          className={cn('person', {\n            person__active: person.slug === personSlug,\n          })}\n          key={person.name}\n        >\n          <td>{person.id}</td>\n          <td\n            role=\"gridcell\"\n            onClick={() => handleChange(person.slug)}\n            className={cn({\n              person__male: person.sex === 'm',\n              person__female: person.sex === 'f',\n            })}\n          >\n            {person.name}\n          </td>\n          <td role=\"gridcell\">\n            {person.sex}\n          </td>\n          <td>{person.born}</td>\n          <td>{person.died}</td>\n          <td\n            role=\"gridcell\"\n            className={cn('person__female', {\n              person__whithoutParent: personSlug === person.motherSlug\n              && person.motherSlug === person.motherName,\n            })}\n            onClick={() => handleChange(person.motherSlug)}\n          >\n            {personSlug === person.motherSlug\n              && person.motherSlug === person.motherName && <span className=\"error\">No info about</span>}\n            {person.motherName}\n          </td>\n          <td\n            role=\"gridcell\"\n            onClick={() => handleChange(person.fatherSlug)}\n            className={cn('person__male', {\n              person__whithoutParent: personSlug === person.fatherSlug\n            && person.fatherSlug === person.fatherName,\n            })}\n          >\n            {personSlug === person.fatherSlug\n              && person.fatherSlug === person.fatherName\n              && <span className=\"error\">No info about</span>}\n\n            {person.fatherName}\n          </td>\n\n        </tr>\n      ))}\n    </>\n  );\n};\n","import React, {\n  useState, useEffect, useMemo,\n} from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { getPeople, TABLE_TITLES } from '../api/api';\nimport { PersonRow } from '../Person/PersonRow';\nimport './PeopleTable.scss';\n\nconst filterPeople = (people: Person[], query: string) => {\n  return (\n    people.filter((person) => (person.name + person.fatherName + person.motherName)\n      .toLowerCase()\n      .includes(query.toLowerCase()))\n  );\n};\n\nexport const PeopleTable = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const history = useHistory();\n  const location = useLocation();\n\n  const searchParams = new URLSearchParams(location.search);\n  const query = useMemo(() => searchParams.get('query') || '', [searchParams]);\n  const sortBy = useMemo(() => searchParams.get('sortBy') || '', [searchParams]);\n  const sortOrder = useMemo(() => searchParams.get('sortOrder') || '', [searchParams]);\n\n  useEffect(() => {\n    getPeople()\n      .then(data => setPeople(\n        data.map((person, index) => {\n          const mother = data.find(mom => mom.name === person.motherName);\n          const father = data.find(dad => dad.name === person.fatherName);\n\n          return {\n            ...person,\n            id: index + 1,\n            motherSlug: mother?.slug || person.motherName,\n            fatherSlug: father?.slug || person.fatherName,\n          };\n        }),\n      ));\n  }, []);\n\n\n  const handlerChange = (event: { target: { value: string } }) => {\n    searchParams.set('query', event.target.value);\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const preparedPeople = useMemo(() => filterPeople(people, query), [people, query]);\n\n  useMemo(() => {\n    switch (sortBy) {\n      case 'id':\n      case 'born':\n      case 'died':\n        preparedPeople.sort((a, b) => a[sortBy] - b[sortBy]);\n        break;\n      case 'name':\n      case 'sex':\n\n        preparedPeople.sort((a, b) => a[sortBy].localeCompare(b[sortBy]));\n        break;\n      default:\n    }\n  },\n  [preparedPeople, sortBy]);\n\n  useMemo(() => {\n    switch (sortOrder) {\n      case 'desc':\n        preparedPeople.reverse();\n        break;\n      default:\n    }\n  },\n  [preparedPeople, sortOrder]);\n\n\n  const handleTitleClick = (title: string) => {\n    if (title === 'mother' || title === 'father') {\n      return;\n    }\n\n    if (sortBy === title && sortOrder === 'asc') {\n      searchParams.set('sortOrder', 'desc');\n    } else {\n      searchParams.set('sortOrder', 'asc');\n    }\n\n    searchParams.set('sortBy', title);\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handlerChange}\n      />\n      <table className=\"people\" role=\"grid\">\n        <thead>\n          <tr>\n            {TABLE_TITLES.map((title: string) => (\n              <th\n                key={title}\n                onClick={() => handleTitleClick(title.toLowerCase())}\n              >\n                {title}\n                {title.toLowerCase() === sortBy && <span className=\"sortFlag\">*</span>}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <PersonRow people={preparedPeople} />\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\n// import { NavLink, Route } from 'react-router-dom';\n\nimport { PeopleTable } from './PeopleTable/PeopleTable';\n\nexport const PeoplePage = () => {\n  return (\n    <>\n      <h2>PeoplePage</h2>\n      <PeopleTable />\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  NavLink, Route, Switch, Redirect,\n} from 'react-router-dom';\nimport './App.scss';\nimport { PeoplePage } from './PeoplePage';\n\nconst HomePage = () => <h2>Home</h2>;\n\nconst App = () => (\n  <>\n    <nav className=\"nav\">\n      <ul className=\"nav__list\">\n        <li>\n          <NavLink\n            to=\"/\"\n            exact\n            className=\"nav__link\"\n            activeClassName=\"nav__link--active\"\n          >\n            Home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to=\"/people\"\n            className=\"nav__link\"\n            activeClassName=\"nav__link--active\"\n          >\n            People\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n    <Switch>\n      <Route path=\"/\" exact component={HomePage} />\n      <Redirect from=\"/home\" to=\"/\" />\n      <Route\n        exact\n        path=\"/people/:personSlug?\"\n        component={PeoplePage}\n      />\n      <h1>Page not found</h1>\n    </Switch>\n\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter><App /></HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}